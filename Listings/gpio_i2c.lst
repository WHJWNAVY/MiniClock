C51 COMPILER V9.59.0.0   GPIO_I2C                                                          05/06/2019 23:08:41 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE GPIO_I2C
OBJECT MODULE PLACED IN .\Objects\gpio_i2c.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE src\gpio_i2c.c OMF2 OPTIMIZE(8,SPEED) BROWSE INCDIR(.\src) DEBUG PRINT(.\Li
                    -stings\gpio_i2c.lst) TABS(2) OBJECT(.\Objects\gpio_i2c.obj)

line level    source

   1          #include "gpio_i2c.h"
   2          
   3          sbit GPIO_I2C_SDA    = P3 ^ 4;
   4          sbit GPIO_I2C_SCL    = P3 ^ 3;
   5          
   6          /*********I2CÂª∂Êó∂4us***********/
   7          void gpio_i2c_wait(void)//5us, @11.0592MHz
   8          {
   9   1          uchar i;
  10   1          _nop_();
  11   1          _nop_();
  12   1          _nop_();
  13   1          i = 10;
  14   1          while (--i);
  15   1      }
  16          
  17          void gpio_i2c_nop(void)
  18          {
  19   1          _nop_();
  20   1          _nop_();
  21   1      }
  22          
  23          void gpio_i2c_init(void)
  24          {
  25   1          GPIO_I2C_SDA = 1;
  26   1          GPIO_I2C_SCL = 1;
  27   1          delay_xms(10);
  28   1      }
  29          
  30          /********ÂºÄÂêØI2CÊÄªÁ∫ø********/
  31          uchar gpio_i2c_start(void)
  32          {
  33   1          GPIO_I2C_SDA = 1;
  34   1          GPIO_I2C_SCL = 1;
  35   1          gpio_i2c_wait();
  36   1          //if(!GPIO_I2C_SDA)
  37   1          //{
  38   1          //    return RTN_I2C_ERR;   //SDAÁ∫ø‰∏∫‰ΩéÁîµÂπ≥ÂàôÊÄªÁ∫øÂøô,ÈÄÄÂá∫
  39   1          //}
  40   1          GPIO_I2C_SDA = 0;
  41   1          gpio_i2c_wait();
  42   1          //while(GPIO_I2C_SDA)
  43   1          //{
  44   1          //    return RTN_I2C_ERR; //SDAÁ∫ø‰∏∫È´òÁîµÂπ≥ÂàôÊÄªÁ∫øÂá∫Èîô,ÈÄÄÂá∫
  45   1          //}
  46   1          GPIO_I2C_SCL = 0;
  47   1          gpio_i2c_wait();
  48   1          return RTN_I2C_OK;
  49   1      }
  50          
  51          /********ÂÖ≥Èó≠I2CÊÄªÁ∫ø*******/
  52          void gpio_i2c_stop(void)
  53          {
  54   1          GPIO_I2C_SDA = 0;
C51 COMPILER V9.59.0.0   GPIO_I2C                                                          05/06/2019 23:08:41 PAGE 2   

  55   1          //GPIO_I2C_SCL = 0;
  56   1          gpio_i2c_wait();
  57   1          GPIO_I2C_SCL = 1;
  58   1          gpio_i2c_wait();
  59   1          GPIO_I2C_SDA = 1;
  60   1          gpio_i2c_wait();
  61   1      }
  62          
  63          /*********ÂèëÈÄÅACK*********/
  64          void gpio_i2c_ack(void)
  65          {
  66   1          GPIO_I2C_SDA = 0;
  67   1          GPIO_I2C_SCL = 0;
  68   1          gpio_i2c_wait();
  69   1          GPIO_I2C_SCL = 1;
  70   1          gpio_i2c_wait();
  71   1          GPIO_I2C_SCL = 0;
  72   1      }
  73          
  74          /*********ÂèëÈÄÅNOACK*********/
  75          void gpio_i2c_nack(void)
  76          {
  77   1          GPIO_I2C_SDA = 1;
  78   1          GPIO_I2C_SCL = 0;
  79   1          gpio_i2c_wait();
  80   1          GPIO_I2C_SCL = 1;
  81   1          gpio_i2c_wait();
  82   1          GPIO_I2C_SCL = 0;
  83   1      }
  84          
  85          /*********ËØªÂèñACK‰ø°Âè∑*********/
  86          uchar gpio_i2c_waitack(void)     //ËøîÂõû‰∏∫:1=ÊúâACK,0=Êó†ACK
  87          {
  88   1          uchar cnt = 0;
  89   1          GPIO_I2C_SCL = 0;
  90   1          GPIO_I2C_SDA = 1;        //ËÆæÁΩÆSDA‰∏∫ËæìÂÖ•ÔºàÂÖ∂ÂÆÉÁ±ªÂûãÁöÑÂçïÁâáÊú∫ÈúÄË¶ÅÈÖçÁΩÆIOËæìÂÖ•ËæìÂá∫ÂØÑÂ
             -≠òÂô®Ôºâ
  91   1          gpio_i2c_wait();
  92   1          GPIO_I2C_SCL = 1;
  93   1          gpio_i2c_wait();
  94   1          while(GPIO_I2C_SDA)
  95   1          {
  96   2              if((cnt++) > 200)
  97   2              {
  98   3                  GPIO_I2C_SCL = 0;
  99   3                  gpio_i2c_wait();
 100   3                  return RTN_I2C_ERR;
 101   3              }
 102   2          }
 103   1          GPIO_I2C_SCL = 0;
 104   1          gpio_i2c_wait();
 105   1          return RTN_I2C_OK;
 106   1      }
 107          
 108          /************I2CÂèëÈÄÅ‰∏Ä‰∏™Â≠óËäÇ*************/
 109          void gpio_i2c_sendbyte(uchar demand) //Êï∞ÊçÆ‰ªéÈ´ò‰ΩçÂà∞‰Ωé‰Ωç//
 110          {
 111   1          uchar i = 8;
 112   1      
 113   1          while(i--)
 114   1          {
 115   2              GPIO_I2C_SCL = 0;
C51 COMPILER V9.59.0.0   GPIO_I2C                                                          05/06/2019 23:08:41 PAGE 3   

 116   2              gpio_i2c_nop();
 117   2              GPIO_I2C_SDA = (bit)(demand & 0x80);
 118   2              demand <<= 1;
 119   2              gpio_i2c_wait();
 120   2              GPIO_I2C_SCL = 1;
 121   2              gpio_i2c_wait();
 122   2          }
 123   1          GPIO_I2C_SCL = 0;
 124   1      }
 125          
 126          /*********I2CËØªÂÖ•‰∏ÄÂ≠óËäÇ*********/
 127          uchar gpio_i2c_recvbyte(void)      //Êï∞ÊçÆ‰ªéÈ´ò‰ΩçÂà∞‰Ωé‰Ωç//
 128          {
 129   1          uchar i = 8;
 130   1          uchar ddata = 0;
 131   1          GPIO_I2C_SDA = 1;            //ËÆæÁΩÆSDA‰∏∫ËæìÂÖ•ÔºàÂÖ∂ÂÆÉÁ±ªÂûãÁöÑÂçïÁâáÊú∫ÈúÄË¶ÅÈÖçÁΩÆIOËæìÂÖ•ËæìÂá∫
             -ÂØÑÂ≠òÂô®Ôºâ
 132   1          while(i--)
 133   1          {
 134   2              ddata <<= 1;    //Êï∞ÊçÆ‰ªéÈ´ò‰ΩçÂºÄÂßãËØªÂèñ
 135   2              GPIO_I2C_SCL = 0;
 136   2              gpio_i2c_wait();
 137   2              GPIO_I2C_SCL = 1;
 138   2              gpio_i2c_wait();  //‰ªéÈ´ò‰ΩçÂºÄÂßã ddata|=GPIO_I2C_SDA;ddata<<=1
 139   2              if(GPIO_I2C_SDA)
 140   2              {
 141   3                  ddata |= 0x01;
 142   3              }
 143   2          }
 144   1          GPIO_I2C_SCL = 0;
 145   1          return ddata;
 146   1      }
 147          
 148          /******I2CÂêëÊåáÂÆöÂú∞ÂùÄÂÜô‰∏Ä‰∏™Â≠óËäÇ******/
 149          uchar gpio_i2c_write(uchar dev_addr, uchar addr, uchar dat)
 150          {
 151   1          if(gpio_i2c_start() != RTN_I2C_OK)
 152   1          {
 153   2              return RTN_I2C_ERR;
 154   2          }
 155   1          gpio_i2c_sendbyte(dev_addr);
 156   1          gpio_i2c_waitack();
 157   1          gpio_i2c_sendbyte(addr);       //ËÆæÁΩÆÂÜôÂú∞ÂùÄ
 158   1          gpio_i2c_waitack();
 159   1          gpio_i2c_sendbyte(dat);      //ÂÜôÊï∞ÊçÆ
 160   1          gpio_i2c_waitack();
 161   1          gpio_i2c_stop();
 162   1      
 163   1          return RTN_I2C_OK;
 164   1      }
 165          
 166          /******I2C‰ªéÊåáÂÆöÂú∞ÂùÄËØª‰∏Ä‰∏™Â≠óËäÇ******/
 167          uchar gpio_i2c_read(uchar dev_addr, uchar addr)
 168          {
 169   1          uchar dat;
 170   1      
 171   1          if(gpio_i2c_start() != RTN_I2C_OK)
 172   1          {
 173   2              return RTN_I2C_ERR;
 174   2          }
 175   1          gpio_i2c_sendbyte(dev_addr);
 176   1          if(gpio_i2c_waitack() != RTN_I2C_OK)
C51 COMPILER V9.59.0.0   GPIO_I2C                                                          05/06/2019 23:08:41 PAGE 4   

 177   1          {
 178   2              gpio_i2c_stop();
 179   2              return RTN_I2C_ERR;
 180   2          }
 181   1          gpio_i2c_sendbyte(addr);       //ËÆæÁΩÆË¶ÅËØªÁöÑÂú∞ÂùÄ
 182   1          gpio_i2c_waitack();
 183   1          gpio_i2c_start();              //ÂÜçÊ¨°ÂèëÈÄÅÂºÄÂßã
 184   1          gpio_i2c_sendbyte(dev_addr + 1);
 185   1          gpio_i2c_waitack();
 186   1          dat = gpio_i2c_recvbyte();     //ËØªÊï∞ÊçÆ
 187   1          gpio_i2c_nack();
 188   1          gpio_i2c_stop();
 189   1          return dat;
 190   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    283    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
